// File: server.js

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const line = require('@line/bot-sdk');
const cron = require('node-cron');
const axios = require('axios');
const db = require('./config/db');

// Import Routes
const ingredientRoutes = require('./routes/ingredients');
const menuRoutes = require('./routes/menus');
const cookingRoutes = require('./routes/cookingRoutes');
const dashboardRoutes = require('./routes/dashboard');
const historyRoutes = require('./routes/historyRoutes');
const reportRoutes = require('./routes/reports');
const userRoutes = require('./routes/userRoutes');
const suggestionRoutes = require('./routes/suggestions');

const app = express();

// --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config ‡πÅ‡∏•‡∏∞ Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE SDK ---
const lineConfig = {
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.LINE_CHANNEL_SECRET
};
const lineClient = new line.messagingApi.MessagingApiClient(lineConfig); // ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥

// Middleware
app.use(cors());
app.post('/api/line/webhook', line.middleware(lineConfig), (req, res) => { // Webhook ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô express.json()
    Promise
        .all(req.body.events.map(handleLineEvent))
        .then((result) => res.json(result))
        .catch((err) => {
            console.error("Webhook Error:", err);
            res.status(500).end();
        });
});
app.use(express.json());
app.use('/images', express.static(path.join(__dirname, 'public/images')));


// --- ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Routes ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á API ---
app.use('/api/ingredients', ingredientRoutes);
app.use('/api/menus', menuRoutes);
app.use('/api/cook', cookingRoutes);
app.use('/api/dashboard', dashboardRoutes);
app.use('/api/history', historyRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/users', userRoutes);
app.use('/api/suggestions', suggestionRoutes);


// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ó‡∏µ‡πà LINE ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô) ---
async function handleLineEvent(event) {
    console.log('Received LINE Event:', JSON.stringify(event, null, 2));

    if (event.type === 'message' && event.message.type === 'text') {
        const userId = event.source.userId;
        const replyToken = event.replyToken;
        const messageText = event.message.text.toLowerCase().trim(); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

        // --- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å ---
        if (messageText.includes('‡∏™‡∏ï‡πá‡∏≠‡∏Å')) {
            console.log(`User ${userId} asked about stock.`);
            try {
                const lowStockItems = await getLowStockItems();
                let replyText = '';
                if (lowStockItems.length > 0) {
                    replyText = 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î:\n';
                    lowStockItems.forEach(item => {
                        replyText += `\n- ${item.name} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${item.quantity} ${item.unit})`;
                    });
                } else {
                    replyText = '‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡∏ö';
                }
                await lineClient.replyMessage({
                    replyToken: replyToken, messages: [{ type: 'text', text: replyText }],
                });
                console.log(`Replied stock info to User ${userId}`);
            } catch (error) {
                console.error("Error replying to stock query:", error);
            }
        }
        // --- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å ---
        else if (messageText === '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å' || messageText === '‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô') {
            console.log(`User ${userId} requested manual low stock notification.`);
            try {
                // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö User ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                await lineClient.replyMessage({
                     replyToken: replyToken,
                     messages: [{ type: 'text', text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...' }]
                });

                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà Scheduler ‡∏ó‡∏≥)
                const lowStockItems = await getLowStockItems();
                await sendLineNotification(lowStockItems); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á Push Message ‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE_TARGET_ID

                console.log(`Manual notification sent triggered by User ${userId}`);

            } catch (error) {
                 console.error("Error triggering manual notification:", error);
                 // (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á reply ‡∏ã‡πâ‡∏≥ ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
            }
        }
        // --- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ---
        else {
             console.log(`Received text message "${event.message.text}" from User ${userId}, but no specific action defined.`);
             // (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° default ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        }
    }
    // ... ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô join, follow ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...

    return Promise.resolve(null);
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scheduler (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
async function getLowStockItems() {
    try {
        const [lowStockItems] = await db.query(
            `SELECT name, quantity, unit FROM ingredients WHERE quantity <= threshold ORDER BY name ASC`
        );
        return lowStockItems;
    } catch (error) {
        console.error("Scheduler/Webhook: Error fetching low stock items:", error);
        return [];
    }
}

async function sendLineNotification(items) {
    if (items.length === 0) {
        console.log("Notification: No low stock items to notify.");
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        // await lineClient.pushMessage({ to: process.env.LINE_TARGET_ID, messages: [{ type: 'text', text: '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î' }] });
        return;
    }
    let textMessage = 'üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ üö®\n'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Emoji ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    items.forEach(item => {
        textMessage += `\n- ${item.name} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${item.quantity} ${item.unit})`;
    });
    try {
        await lineClient.pushMessage({
            to: process.env.LINE_TARGET_ID,
            messages: [{ type: 'text', text: textMessage }],
        });
        console.log("Notification: Successfully sent LINE notification.");
    } catch (error) {
        console.error("Notification: Failed to send LINE Push Message:", error.response ? error.response.data : error.message);
    }
}

// --- ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Scheduler (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
cron.schedule('0 8 * * *', async () => { /* ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ... */ });
console.log('Scheduled task for low stock notification is set to run daily at 8:00 AM Bangkok time.');


// --- ‡πÄ‡∏£‡∏¥‡πà‡∏° Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});